{
  "openapi": "3.0.3",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": { "email": "apiteam@swagger.io" },
    "license": { "name": "Apache 2.0", "url": "http://www.apache.org/licenses/LICENSE-2.0.html" }
  },
  "tags": [
    { "name": "pet", "description": "Everything about your Pets", "externalDocs": { "description": "Find out more", "url": "http://swagger.io" } },
    { "name": "store", "description": "Access to Petstore orders" },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": { "description": "Find out more about our store", "url": "http://swagger.io" }
    }
  ],
  "externalDocs": { "description": "Find out more about Swagger", "url": "http://swagger.io" },
  "paths": {
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "requestBody": {
          "required": true,
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Pet" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/Pet" } }
          }
        },
        "responses": { "405": { "description": "Invalid input", "content": {} } }
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "requestBody": {
          "required": true,
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Pet" } },
            "application/xml": { "schema": { "$ref": "#/components/schemas/Pet" } }
          }
        },
        "responses": {
          "400": { "description": "Invalid ID supplied", "content": {} },
          "404": { "description": "Pet not found", "content": {} },
          "405": { "description": "Validation exception", "content": {} }
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": true,
            "description": "Status values that need to be considered for filter",
            "schema": { "type": "array", "items": { "enum": ["available", "pending", "sold"], "default": "available", "type": "string" } },
            "style": "form",
            "explode": true
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } } },
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } } }
            }
          },
          "400": { "description": "Invalid status value", "content": {} }
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "required": true,
            "description": "Tags to filter by",
            "schema": { "type": "array", "items": { "type": "string" } },
            "style": "form",
            "explode": true
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } } },
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Pet" } } }
            }
          },
          "400": { "description": "Invalid tag value", "content": {} }
        }
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "security": [{ "api_key": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "required": true,
            "description": "ID of pet to return",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "$ref": "#/components/schemas/Pet" } },
              "application/json": { "schema": { "$ref": "#/components/schemas/Pet" } }
            }
          },
          "400": { "description": "Invalid ID supplied", "content": {} },
          "404": { "description": "Pet not found", "content": {} }
        }
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "parameters": [
          { "in": "header", "name": "api_key", "required": false, "schema": { "type": "string" } },
          { "in": "path", "name": "petId", "required": true, "description": "Pet id to delete", "schema": { "type": "integer", "format": "int64" } }
        ],
        "requestBody": { "content": {} },
        "responses": { "400": { "description": "Invalid ID supplied", "content": {} }, "404": { "description": "Pet not found", "content": {} } }
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "required": true,
            "description": "ID of pet that needs to be updated",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "required": false, "description": "Updated name of the pet", "type": "string" },
                  "status": { "required": false, "description": "Updated status of the pet", "type": "string" }
                }
              }
            }
          }
        },
        "responses": { "405": { "description": "Invalid input", "content": {} } }
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "required": true,
            "description": "ID of pet to update",
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": { "required": false, "description": "Additional data to pass to server", "type": "string" },
                  "file": { "required": false, "description": "file to upload", "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiResponse" } } }
          }
        }
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "security": [{ "api_key": [] }],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": { "application/json": { "schema": { "type": "object", "additionalProperties": { "type": "integer", "format": "int32" } } } }
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "required": true,
          "description": "order placed for purchasing the pet",
          "content": { "*": { "schema": { "$ref": "#/components/schemas/Order" } } }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "$ref": "#/components/schemas/Order" } },
              "application/json": { "schema": { "$ref": "#/components/schemas/Order" } }
            }
          },
          "400": { "description": "Invalid Order", "content": {} }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "description": "ID of pet that needs to be fetched",
            "schema": { "maximum": 10, "minimum": 1, "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "$ref": "#/components/schemas/Order" } },
              "application/json": { "schema": { "$ref": "#/components/schemas/Order" } }
            }
          },
          "400": { "description": "Invalid ID supplied", "content": {} },
          "404": { "description": "Order not found", "content": {} }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "description": "ID of the order that needs to be deleted",
            "schema": { "minimum": 1, "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "content": {} },
        "responses": { "400": { "description": "Invalid ID supplied", "content": {} }, "404": { "description": "Order not found", "content": {} } }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "description": "Created user object",
          "content": { "*": { "schema": { "$ref": "#/components/schemas/User" } } }
        },
        "responses": { "default": { "description": "successful operation", "content": {} } }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "required": true,
          "description": "List of user object",
          "content": { "*": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/User" } } } }
        },
        "responses": { "default": { "description": "successful operation", "content": {} } }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "required": true,
          "description": "List of user object",
          "content": { "*": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/User" } } } }
        },
        "responses": { "default": { "description": "successful operation", "content": {} } }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "required": true,
            "description": "The user name for login",
            "schema": { "type": "string" },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "description": "The password for login in clear text",
            "schema": { "type": "string" },
            "style": "form",
            "explode": false
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": { "schema": { "description": "calls per hour allowed by the user", "type": "integer", "format": "int32" } },
              "X-Expires-After": { "schema": { "description": "date in UTC when token expires", "type": "string", "format": "date-time" } }
            },
            "content": { "application/xml": { "schema": { "type": "string" } }, "application/json": { "schema": { "type": "string" } } }
          },
          "400": { "description": "Invalid username/password supplied", "content": {} }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "requestBody": { "content": {} },
        "responses": { "default": { "description": "successful operation", "content": {} } }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "content": {} },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": { "schema": { "$ref": "#/components/schemas/User" } },
              "application/json": { "schema": { "$ref": "#/components/schemas/User" } }
            }
          },
          "400": { "description": "Invalid username supplied", "content": {} },
          "404": { "description": "User not found", "content": {} }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          { "in": "path", "name": "username", "required": true, "description": "The name that needs to be deleted", "schema": { "type": "string" } }
        ],
        "requestBody": { "content": {} },
        "responses": { "400": { "description": "Invalid username supplied", "content": {} }, "404": { "description": "User not found", "content": {} } }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          { "in": "path", "name": "username", "required": true, "description": "name that need to be updated", "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated user object",
          "content": { "*": { "schema": { "$ref": "#/components/schemas/User" } } }
        },
        "responses": { "400": { "description": "Invalid user supplied", "content": {} }, "404": { "description": "User not found", "content": {} } }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "xml": { "name": "Order" },
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "petId": { "type": "integer", "format": "int64" },
          "quantity": { "type": "integer", "format": "int32" },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": { "description": "Order Status", "enum": ["placed", "approved", "delivered"], "type": "string" },
          "complete": { "default": false, "type": "boolean" }
        }
      },
      "Category": {
        "xml": { "name": "Category" },
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string" } }
      },
      "User": {
        "xml": { "name": "User" },
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "username": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string" },
          "password": { "type": "string" },
          "phone": { "type": "string" },
          "userStatus": { "description": "User Status", "type": "integer", "format": "int32" }
        }
      },
      "Tag": {
        "xml": { "name": "Tag" },
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string" } }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "xml": { "name": "Pet" },
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "category": { "$ref": "#/components/schemas/Category" },
          "name": { "example": "doggie", "type": "string" },
          "photoUrls": { "type": "array", "items": { "type": "string" } },
          "tags": { "type": "array", "items": { "$ref": "#/components/schemas/Tag" } },
          "status": { "description": "pet status in the store", "enum": ["available", "pending", "sold"], "type": "string" }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": { "code": { "type": "integer", "format": "int32" }, "type": { "type": "string" }, "message": { "type": "string" } }
      }
    }
  },
  "servers": [{ "url": "http://petstore.swagger.io/v2" }]
}
